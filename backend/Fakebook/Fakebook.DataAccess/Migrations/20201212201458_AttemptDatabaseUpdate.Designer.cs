// <auto-generated />
using System;
using Fakebook.DataAccess.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fakebook.DataAccess.Migrations
{
    [DbContext(typeof(FakebookContext))]
    [Migration("20201212201458_AttemptDatabaseUpdate")]
    partial class AttemptDatabaseUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Fakebook.DataAccess.Model.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", "Fakebook");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.FollowEntity", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<int>("FolloweeId")
                        .HasColumnType("int");

                    b.HasKey("FollowerId", "FolloweeId")
                        .HasName("Pk_FollowEntity");

                    b.HasIndex("FolloweeId");

                    b.ToTable("Follow", "Fakebook");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.LikeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Like", "Fakebook");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.PostEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("string");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdatetime())");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("string");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post", "Fakebook");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", "Fakebook");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.CommentEntity", b =>
                {
                    b.HasOne("Fakebook.DataAccess.Model.CommentEntity", "ParentComment")
                        .WithMany("ChildrenComments")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("Fk_Comment_Comment");

                    b.HasOne("Fakebook.DataAccess.Model.PostEntity", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("Fk_Comment_Post")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fakebook.DataAccess.Model.UserEntity", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_COMMENT_USER")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.FollowEntity", b =>
                {
                    b.HasOne("Fakebook.DataAccess.Model.UserEntity", "Followee")
                        .WithMany("Followers")
                        .HasForeignKey("FolloweeId")
                        .HasConstraintName("FK_Follow_FolloweeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Fakebook.DataAccess.Model.UserEntity", "Follower")
                        .WithMany("Followees")
                        .HasForeignKey("FollowerId")
                        .HasConstraintName("FK_Follow_FollowerId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.LikeEntity", b =>
                {
                    b.HasOne("Fakebook.DataAccess.Model.PostEntity", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Like_Post")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fakebook.DataAccess.Model.UserEntity", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Like_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.PostEntity", b =>
                {
                    b.HasOne("Fakebook.DataAccess.Model.UserEntity", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Post_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.CommentEntity", b =>
                {
                    b.Navigation("ChildrenComments");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.PostEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Fakebook.DataAccess.Model.UserEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Followees");

                    b.Navigation("Followers");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
